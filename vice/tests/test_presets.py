
from __future__ import print_function 
import warnings 
import vice 
import sys 
import os 


def generate_dummy_yield_file(filename = "vice_dummy_preset.py"): 
	""" 
	Generate a dummy yield file that sets all CCSNe and SNe Ia yields to 
	0.001  
	"""
	cnt = """\

# This file generated by vice/tests/test_presets.py 
import vice 
for i in vice._globals._RECOGNIZED_ELEMENTS_: 
	vice.yields.ccsne.settings[i] = 0.001 
	vice.yields.sneia.settings[i] = 0.001 

""" 
	os.system("echo \'%s\' >> %s" % (cnt, filename)) 


def remove_dummy_yield_file(filename = "vice_dummy_preset.py"): 
	""" 
	Remove the dummy yield file 
	""" 
	os.system("rm -f %s" % (filename)) 


def test_save(): 
	""" 
	Test the saved presets by attempting to import them, then checking to see 
	that all yields are indeed set to 0.001 
	""" 
	try: 
		vice.yields.presets.save("vice_dummy_preset.py") 
	except: 
		return False 
	return True 


def test_preset(): 
	try: 
		from vice.yields.presets import vice_dummy_preset 
	except: 
		return False 
	for i in vice._globals._RECOGNIZED_ELEMENTS_: 
		if vice.yields.ccsne.settings[i] != 0.001: 
			return False 
		elif vice.yields.sneia.settings[i] != 0.001: 
			return False 
		else: 
			continue 
	vice.yields.ccsne.settings.restore_defaults() 
	vice.yields.sneia.settings.restore_defaults() 
	return True 


def test_remove(): 
	""" 
	Attempt to import the saved presets after they've been removed 
	""" 
	try: 
		vice.yields.presets.remove("vice_dummy_preset", force = True)  
	except: 
		return False 
	return "vice_dummy_preset.py" not in os.listdir("%syields/presets/" % (
		vice._globals._DIRECTORY_)) 


def main(): 
	print("=================================================================")
	print("TESTING: vice.yields.presets") 
	print("         vice.yields.presets.save") 
	print("         vice.yields.presets.remove ") 
	bool_to_message = {
		True:		"Success", 
		False: 		"Failed" 
	}
	generate_dummy_yield_file() 
	print("vice.yields.presets.save :: %s" % (bool_to_message[test_save()])) 
	print("vice.yields.presets :: %s" % (bool_to_message[test_preset()])) 
	print("vice.yields.presets.remove :: %s" % (
		bool_to_message[test_remove()])) 
	remove_dummy_yield_file() 

if __name__ == "__main__": 
	main() 

